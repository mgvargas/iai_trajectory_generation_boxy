<?xml version="1.0"?>
<launch>

    <!-- Parameters NOTE: if arg Boxy is true, arg sim must be false -->
    <arg name="debug" default="false" />
    <arg name="sim" default="true" />
    <arg name="rviz" default="true" />
    <arg name="naive" default="true" />
    <arg name="boxy" default="false" />
    <arg name="urdf-name" default="boxy_description.urdf.xacro"/>
    <arg name="urdf-path" default="$(find iai_boxy_description)/robots/$(arg urdf-name)"/>
    <arg name="param-name" default="robot_description"/>

    <param name="$(arg param-name)" command="xacro --inorder '$(arg urdf-path)'" />

    <!-- Run the object detection and object database -->
    <include file="$(find iai_markers_tracking)/launch/markers_detection.launch">
    	<arg name="sim" value="$(arg sim)"/>
      <arg name="rviz" value="$(arg rviz)"/>
    	<arg name="boxy" value="$(arg boxy)"/>
    </include>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

    <!-- Simulation (publishes markers in tf) -->
    <!--include file="$(find iai_boxy_description)/launch/upload_boxy.launch" /-->
    <group if="$(arg sim)">
        <group if="$(arg naive)">
            <include file="$(find iai_trajectory_generation_boxy)/launch/naive_kinem_sim.launch"/>
        </group>
		  <group unless="$(arg boxy)">
            <node name="simulate_camera" pkg="iai_markers_tracking" type="simulate_camera_transform.py"
              respawn="false" output="screen"/>
        </group>
    </group>

    <node pkg="tf2_ros" type="buffer_server" name="tf2_buffer_server" />
    <node pkg="tf2_ros" type="static_transform_publisher" name="fake_localization"
        output="screen" args="0 0 0 0 0 0 map odom" />

    <!-- Simulate robot trajectory -->
    <node name="projection_manager" pkg="iai_trajectory_generation_boxy" type="projection_manager.py"
          respawn="false" output="screen"/>
    <node name="sim_motion_controller" pkg="iai_trajectory_generation_boxy" type="sim_controller.py"
          respawn="false" output="screen"/>
        <!--remap from="~joint_states" to="joint_states" /-->
    <node name="trajectory_evaluation" pkg="iai_trajectory_generation_boxy" type="trajectory_evaluation.py"
          respawn="false" output="screen"/>
    <include file="$(find iai_trajectory_generation_boxy)/launch/collision.launch"/>

    <!-- Send trajectory to the robot -->
    <group if="$(arg boxy)">
           <node name="send_commands" pkg="iai_trajectory_generation_boxy" type="send_command_to_boxy.py"
              respawn="false" output="screen"/>
    </group>

    <!-- Boxy simulation>
    <group if="$(arg sim)">
        <include file="$(find iai_boxy_sim)/launch/boxy.launch"/>
    </group-->

</launch>
